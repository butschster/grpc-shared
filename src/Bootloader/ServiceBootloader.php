<?php

declare(strict_types=1);

namespace Shared\gRPC\Bootloader;

use Psr\Container\ContainerInterface;
use Shared\gRPC\Config\GRPCServicesConfig;
use Shared\gRPC\Service\Client\CinemaServiceClient;
use Shared\gRPC\Service\Client\PaymentServiceClient;
use Shared\gRPC\Service\Client\TokensServiceClient;
use Shared\gRPC\Service\Client\UsersServiceClient;
use Shared\gRPC\Service\GrpcClientCore;
use Shared\gRPC\Service\ServiceLocator;
use Shared\gRPC\Service\ServiceLocatorInterface;
use Shared\gRPC\Services\Cinema\v1\CinemaServiceInterface;
use Shared\gRPC\Services\Payment\v1\PaymentServiceInterface;
use Shared\gRPC\Services\Tokens\v1\TokensServiceInterface;
use Shared\gRPC\Services\Users\v1\UsersServiceInterface;
use Spiral\Boot\Bootloader\Bootloader;
use Spiral\Boot\EnvironmentInterface;
use Spiral\Config\ConfiguratorInterface;
use Spiral\Core\Container;
use Spiral\Core\InterceptableCore;
use Spiral\RoadRunnerBridge\GRPC\LocatorInterface;

/**
 * This class is read only. Please do not edit it directly.
 */
final class ServiceBootloader extends Bootloader
{
    public function __construct(
        private readonly ConfiguratorInterface $config,
    ) {
    }

    public function defineDependencies(): array
    {
        return [
            CommandMapperBootloader::class,
        ];
    }

    public function defineSingletons(): array
    {
        return [
            ServiceLocatorInterface::class => ServiceLocator::class,
            LocatorInterface::class => ServiceLocator::class,
        ];
    }

    public function init(EnvironmentInterface $env): void
    {
        $this->initConfig($env);
    }

    public function boot(Container $container): void
    {
        $this->initServices($container);
    }

    /**
     * Don't edit this method manually, it is generated by GRPC services generator.
     */
    private function initConfig(EnvironmentInterface $env): void
    {
        $this->config->setDefaults(
            GRPCServicesConfig::CONFIG,
            [
                'services' => [
                    UsersServiceClient::class => ['host' => $env->get('USERS_SERVICE_CLIENT_HOST', '127.0.0.1:9000')],
                    CinemaServiceClient::class => ['host' => $env->get('CINEMA_SERVICE_CLIENT_HOST', '127.0.0.1:9001')],
                    PaymentServiceClient::class => ['host' => $env->get('PAYMENT_SERVICE_CLIENT_HOST', '127.0.0.1:9002')],
                    TokensServiceClient::class => ['host' => $env->get('TOKENS_SERVICE_CLIENT_HOST', '127.0.0.1:9003')],
                ],
                'interceptors' => [
                    \Shared\gRPC\Interceptor\Outgoing\TokenExtractorInterceptor::class,
                    \Shared\gRPC\Interceptor\Outgoing\OpenTelemetryInterceptor::class,
                ],
            ]
        );
    }

    /**
     * Don't edit this method manually, it is generated by GRPC services generator.
     */
    private function initServices(ContainerInterface $container): void
    {
        $container->bindSingleton(
            UsersServiceInterface::class,
            static function(GRPCServicesConfig $config) use($container): UsersServiceInterface
            {
                $service = $config->getService(UsersServiceClient::class);

                $core = new InterceptableCore(new GrpcClientCore(
                    $service['host'],
                    ['credentials' => $service['credentials'] ?? $config->getDefaultCredentials()]
                ));

                foreach ($config->getInterceptors() as $interceptor) {
                    $core->addInterceptor($container->get($interceptor));
                }

                return $container->make(UsersServiceClient::class, ['core' => $core]);
            }
        );


        $container->bindSingleton(
            CinemaServiceInterface::class,
            static function(GRPCServicesConfig $config) use($container): CinemaServiceInterface
            {
                $service = $config->getService(CinemaServiceClient::class);

                $core = new InterceptableCore(new GrpcClientCore(
                    $service['host'],
                    ['credentials' => $service['credentials'] ?? $config->getDefaultCredentials()]
                ));

                foreach ($config->getInterceptors() as $interceptor) {
                    $core->addInterceptor($container->get($interceptor));
                }

                return $container->make(CinemaServiceClient::class, ['core' => $core]);
            }
        );


        $container->bindSingleton(
            PaymentServiceInterface::class,
            static function(GRPCServicesConfig $config) use($container): PaymentServiceInterface
            {
                $service = $config->getService(PaymentServiceClient::class);

                $core = new InterceptableCore(new GrpcClientCore(
                    $service['host'],
                    ['credentials' => $service['credentials'] ?? $config->getDefaultCredentials()]
                ));

                foreach ($config->getInterceptors() as $interceptor) {
                    $core->addInterceptor($container->get($interceptor));
                }

                return $container->make(PaymentServiceClient::class, ['core' => $core]);
            }
        );


        $container->bindSingleton(
            TokensServiceInterface::class,
            static function(GRPCServicesConfig $config) use($container): TokensServiceInterface
            {
                $service = $config->getService(TokensServiceClient::class);

                $core = new InterceptableCore(new GrpcClientCore(
                    $service['host'],
                    ['credentials' => $service['credentials'] ?? $config->getDefaultCredentials()]
                ));

                foreach ($config->getInterceptors() as $interceptor) {
                    $core->addInterceptor($container->get($interceptor));
                }

                return $container->make(TokensServiceClient::class, ['core' => $core]);
            }
        );
    }
}
